import { AuthenticationInfo } from "./api";
export interface RedirectToSignupOptions {
    postSignupRedirectUrl: string;
}
export interface RedirectToLoginOptions {
    postLoginRedirectUrl: string;
}
export interface IAuthClient {
    getAuthenticationInfoOrNull(forceRefresh?: boolean): Promise<AuthenticationInfo | null>;
    logout(redirectAfterLogout: boolean): Promise<void>;
    getSignupPageUrl(options?: RedirectToSignupOptions): string;
    getLoginPageUrl(options?: RedirectToLoginOptions): string;
    getAccountPageUrl(): string;
    getOrgPageUrl(orgId?: string): string;
    getCreateOrgPageUrl(): string;
    getSetupSAMLPageUrl(orgId: string): string;
    redirectToSignupPage(options?: RedirectToSignupOptions): void;
    redirectToLoginPage(options?: RedirectToLoginOptions): void;
    redirectToAccountPage(): void;
    redirectToOrgPage(orgId?: string): void;
    redirectToCreateOrgPage(): void;
    redirectToSetupSAMLPage(orgId: string): void;
    addLoggedInChangeObserver(observer: (isLoggedIn: boolean) => void): void;
    removeLoggedInChangeObserver(observer: (isLoggedIn: boolean) => void): void;
    destroy(): void;
}
export interface IAuthOptions {
    authUrl: string;
    enableBackgroundTokenRefresh?: boolean;
}
export declare function createClient(authOptions: IAuthOptions): IAuthClient;
